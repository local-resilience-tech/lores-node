# This dockerfile is used to build the backend for development purposes only.
# In production, use the dockerfile in the root directory which also builds the frontend.

# Unlike the the production dockerfile, this one is also not multi-platform, it only
# builds for the host architecture.

# It's also not multi-stage, it builds and runs the backend in the same container using
# your existing cargo installation, which should avoid rebuilding the dependencies
# every time you change a file.

FROM rust:1 AS chef
# We only pay the installation cost once,
# it will be cached from the second build onwards
RUN cargo install cargo-chef
WORKDIR /app

FROM ubuntu AS runtime_base
WORKDIR /app
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update \
    && apt-get -y install ca-certificates curl libssl-dev pkg-config libgit2-dev \
    && install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get -y install docker-ce-cli docker-compose-plugin
RUN mkdir -p /local_apps


FROM chef AS planner
COPY ./src src
COPY ./Cargo.toml ./Cargo.toml
COPY ./Cargo.lock ./Cargo.lock
RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --recipe-path recipe.json

COPY ./src src
COPY ./Cargo.toml Cargo.toml
COPY ./Cargo.lock Cargo.lock
COPY ./data/config.toml config.toml
COPY ./migrations_projectiondb migrations_projectiondb
COPY ./migrations_nodedatadb migrations_nodedatadb
COPY ./data/projections.sqlite projections.sqlite
ENV DATABASE_URL=sqlite:/app/projections.sqlite
RUN cargo build --bin lores-node

FROM runtime_base AS runtime
COPY --from=builder /app/target/debug/lores-node lores-node
COPY ./migrations_projectiondb migrations_projectiondb
COPY ./migrations_nodedatadb migrations_nodedatadb
COPY ./Cargo.toml Cargo.toml
COPY ./data/projections.sqlite projections.sqlite
COPY ./data/operations.sqlite operations.sqlite
COPY ./data/node_data.sqlite node_data.sqlite
COPY ./data/config.toml config.toml
COPY ./docker-gitconfig.txt /root/.gitconfig

EXPOSE 8200
EXPOSE 2022/udp
EXPOSE 2023/udp

CMD ["./lores-node"]
